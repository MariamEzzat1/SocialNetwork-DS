String filename ;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
   
        JFileChooser chooser =new JFileChooser();
        chooser.showOpenDialog(null);
        File f =chooser.getSelectedFile();
        filename=f.getAbsolutePath();
        
        
        try{
        FileReader reader = new FileReader(filename);
        BufferedReader br = new BufferedReader(reader);
        jTextArea1.read(br,null);
        br.close();
          jTextArea1.requestFocus();
           
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);}
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
      
      
      String [] array = readArray(filename);
     String res=minifying(array);
     jTextArea2.setText(res);
 
    
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
String[] arr = read(filename);
      String consistency=CheckConsistent(arr);
      jTextArea2.setText(consistency);
        // TODO add your handling code here:
      
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
       
      String [] array = readArray(filename);
String text=minifying(array);

 String compressed=compression (text);
  String formatted = getPrettyXml(compressed);
  //
  

System.out.println("Encoded Statement: "+formatted);
System.out.println (trav);
System.out.println("Size before: "+arrSize(array)+" bytes");
int size_af=Size(compression(text));
System.out.println("Size after: "+ size_af+" bytes");
 
        jTextArea2.setText("Encoded Statement: "+formatted+"\n"+trav+"\n"+"Size before: "+arrSize(array)+" bytes"+"\n"+"Size after: "+ size_af+" bytes"); 
     
    }                                        

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {                                         
 String text = readString(filename);
    String format = getPrettyXml(text);
    jTextArea2.setText(format);

        // TODO add your handling code here:
    }                                        

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
String text = readString(filename);
String format = getPrettyXml(text);
String [] array = format.split("\n");

JSONtree tree = new JSONtree();

String json = tree.ConvertTOJSON(array);

   jTextArea2.setText(json);
   
    }                                        

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
         String xml = readString(filename);
    String format = getPrettyXml(xml);
    String [] array =format.split("\n");
    String error=CheckError(array);
   jTextArea2.setText(error);
    }                                        

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        DefaultDirectedGraph<String, DefaultEdge> g = new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);
      DocumentBuilderFactory factory =  DocumentBuilderFactory.newInstance();
      try{
      DocumentBuilder builder = factory.newDocumentBuilder();
      Document document = builder.parse(new File(filename));
      document.getDocumentElement().normalize();
      NodeList userlist=document.getElementsByTagName("user");
      for(int i=0;i<userlist.getLength();i++){
      Node user=userlist.item(i);
       Element userElement=(Element)user;
      String id= userElement.getElementsByTagName("id").item(0).getTextContent();
      //vertix
      if(!g.containsVertex(id)){g.addVertex(id);}
       if(user.getNodeType()==Node.ELEMENT_NODE)
      {
         String []arr= userElement.getElementsByTagName("followers").item(0).getTextContent().split("\n");
         for(int k=0;k<arr.length;k++){
         if(arr[k].trim().length()==0)
             continue;
         else
             System.out.println(arr[k].trim());
         if(!g.containsVertex(arr[k].trim())) 
         {if(!g.containsEdge(id, arr[k].trim()))
                g.addVertex(arr[k].trim());}
                                                  
               g.addEdge(id, arr[k].trim());
         
         jTextArea2.setText("check the created graph in your pc");

      }
      
      
      }
       File imgFile = new File("C:\\Users\\Maria\\Downloads\\graph.png");
    imgFile.createNewFile();

    JGraphXAdapter<String, DefaultEdge> graphAdapter = 
            
      new JGraphXAdapter<String, DefaultEdge>(g);
    mxIGraphLayout layout = new mxCircleLayout(graphAdapter);
    layout.execute(graphAdapter.getDefaultParent());
    
    BufferedImage image = 
      mxCellRenderer.createBufferedImage(graphAdapter, null, 2, Color.WHITE, true, null);
 
    ImageIO.write(image, "PNG", imgFile);

    assertTrue(imgFile.exists());
     
    Desktop dt = Desktop.getDesktop();
    dt.open(imgFile);
    
      }
      
      }
      
      catch(ParserConfigurationException | SAXException | IOException e){}

    
        
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editorxml.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editorxml.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editorxml.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editorxml.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editorxml().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration                   
